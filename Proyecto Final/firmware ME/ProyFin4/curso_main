#include "curso_main.h"

// DS 51537 - Configuration Settings (Ver. C)
#pragma config OSC = HS     	/* Para osc a 20Mhz */
#pragma config FCMEN = OFF		/* Para forzar a usar solo el osc externo */
#pragma config IESO = OFF		/* Osc Interno OFF */
#pragma config PWRT = ON 		/* Power Up Timer ON */
#pragma config BOREN = OFF		/* Si detecta una falla en la alimentacion: RESET */
#pragma config BORV = 3     	/* La tensión a la que se resetea, antes 43 */
#pragma config WDT = OFF, WDTPS = 128 /* Watch Dog Timer ON y con un preescaler de 128 */
#pragma config MCLRE = ON		/* MCLR Externo ON */
#pragma config LPT1OSC = OFF	/* Timer 1 Osc Int OFF */
#pragma config PBADEN = OFF		/* Pines del B no analógicos */
#pragma config CCP2MX = PORTC	/* El capture del PWM lo manejo por el puerto C */
#pragma config STVREN = ON 		/* Si hay un desborde del stack: RESET */
#pragma config LVP = OFF		/* Low Voltage Programming OFF */
#pragma config XINST = ON		/* Para modo extendido */
#pragma config DEBUG = ON		/* Para habilitar el ICD */

#pragma romdata eedata = 0xF00000 // Estos valores se pregraban en la EEPROM */
	rom const char EEvarl = 0;
#pragma romdata

#pragma udata MyBanco1 = 0x100
	FSFILE *pOldFile, *pNewFile;
	char bfr [6];
	int bytesRead, bytesWritten;
	unsigned char LocalData;
	unsigned char LocalAddress;
	unsigned char COUNT;
	unsigned int Conversor;
	unsigned char AcumAD;
	unsigned int Canal0;
	char Cadena[128];
	unsigned char TSend;			// Para el display
	unsigned char x_display;
	unsigned char y_display;
	unsigned char Columna;			// Para el teclado
	unsigned char Temp_Tec;
	unsigned char Temp_No_Tec;
	unsigned char Last_Tec;
	unsigned char New_Tec;
	unsigned char Tecla;
	unsigned char Etapa;
	unsigned char TempNro;
	unsigned char TempNro1;
	unsigned char TempRes;
	unsigned char TempPos;
	unsigned char segundo;
	unsigned char minuto;	
	unsigned char hora;
	unsigned char dia;
	unsigned char mes;
	unsigned char ano;
	unsigned char Hexa;
	unsigned char semana;
	float uV;
	float uVE;
	float Temperatura;
	int	IntTemp;
	//Para el RS232
	char RxData;
	unsigned char SaveFSR0L;
	unsigned char SaveFSR0H;
	
	
	
#pragma udata


//-----------------------------------------
//-----Estructura del buffer RS232---------
//-----------------------------------------

#pragma udata MyBanco2 = 0x200
	struct BuRx Buffer232; //Defino una estructura para el buffer de recepcion RS232
#pragma udata

//----------------------
//-------MAIN-----------
//----------------------

void main()
{
	Columna=0;
	Temp_No_Tec=250;
	Last_Tec=0;
	New_Tec=0;
	Temp_Tec=0;
	AcumAD = 64;
	Conversor=0;

	ADCON1 = 0x8E;

	TRISA = 0xFF;
	TRISB = 0x00;
	TRISC = 0x80;
	TRISD = 0x00;
	TRISE = 0x00;

	//Config Timer 2
	PR2 = 156;
	INTCON |= 0xC0;
	OpenTimer2(	TIMER_INT_ON &       //SE COMENTA PORQ HAY UN ERROR DE CONFIGURACION EN ESTE MICRO SE DEBE HACER MANUAL
				T2_PS_1_4	 &
				T2_POST_1_8	  );
	OpenADC( 	ADC_FOSC_8 		&
				ADC_RIGHT_JUST	&
				ADC_16_TAD		&
				ADC_CH0			&
				ADC_VREFPLUS_VDD	&
				ADC_VREFMINUS_VSS,
				ADC_INT_ON, 0X0E);    
	
	ADCON0=0X01;
	ADCON1=0X0E;
	ADCON2=0XA5;
	//Al igual q el conversor tiene problemas para configurar la USART, NO CONFIGURA LA MODALIDAD DE 16BIT PARA EL REGISTRO DE BAUDRATE.
	OpenUSART(	USART_TX_INT_OFF 	&
				USART_RX_INT_ON 	&
				USART_ASYNCH_MODE	&
				USART_EIGHT_BIT		&
				USART_CONT_RX		&
				USART_BRGH_HIGH, 64);		//Para configurar a 9200 para 20Mhz
				
	INTCON=0xC0;

	ResetBufferRx((unsigned char *)&Buffer232);

	InicioDisplay();

/*	WriteHT1381(0x07,0x00); //Para deshabilitar el WriteProtect
	WriteHT1381(0x06,0x07); //Para configurar el año (el primero es la instruccion, la segunda el dato)
	WriteHT1381(0x05,0x06); //Para configurar el día de la semana
	WriteHT1381(0x04,0x10); //Para configuara el mes.
	WriteHT1381(0x03,0x13); //Día
	WriteHT1381(0x02,0x20); //Hora
	WriteHT1381(0x01,0x39); //Minutos
	WriteHT1381(0x00,0x00); //Segundos
	WriteHT1381(0x07,0x80); //Para habilitar el WriteProtect	*/
	Etapa=0;
	New_Tec=0;
	TempNro=0;
Main1:

//	ClrWdt();
	segundo=ReadHT1381(0x00);
	minuto=ReadHT1381(0x01);
	hora=ReadHT1381(0x02);
	dia=ReadHT1381(0x03);
	mes=ReadHT1381(0x04);
	ano=ReadHT1381(0x06);
	semana=ReadHT1381(0x05);

//	++++++++++++++++++CONVERSOR ********************
//	Tj	0ºC = 0uV  500ºC = 27393uF
//	Ganancia = 5V/27393uV= 182,528
// 	uV = Canal0 / 2.39
// 	La termocupla no es lineal, sigue esta formula: tg= Co + C.E + C2E^2...


	uV = (float) Canal0/2.39;
	uVE = uV;			//El polinomio se simplifica para comodidad del compilador
	Temperatura = (1.978425E-2 * uVE);
	uVE *= uV;
	Temperatura -=(2.001204E-7 * uVE);
	uVE *=uV;
	Temperatura+=(1.036969E-11 * uVE);
	uVE *= uV;
	Temperatura-=(2.549687E-16 * uVE);
	uVE *= uV;
	Temperatura+=(3.585153E-21 * uVE);
	uVE *= uV;
	Temperatura-=(5.344285E-26 * uVE);
	uVE *= uV;
	Temperatura+=(5.099890E-31 * uVE);

	IntTemp = (int)(Temperatura+0.5);
	sprintf(Cadena, "Temp = %03dC", IntTemp);
	PrintfLcdXY(0,0,Cadena);
	if(New_Tec!=0)
	{
		sprintf(Cadena, "T: %02u", New_Tec);
		PrintfLcdXY(10,0,Cadena);
		sprintf(Cadena, "Tecla = %02u\r\n", New_Tec);
		putRAMUSART(Cadena);
		New_Tec=0;
	}
	RxData=Get_Dato_Buffer((unsigned char *)&Buffer232);
	if(RxData!=-1)
	{
		sprintf(Cadena, "Rx: %c", RxData);
		PrintfLcdXY(0,1,Cadena);
		if((RxData=='t')||(RxData=='T'))
		{
			sprintf(Cadena, "Temp = %03d\r\n",IntTemp);
			putRAMUSART(Cadena);
		}
	}	
//	sprintf(Cadena, "    %02x/%02x/%02x    ", dia,mes,ano);
//	PrintfLcdXY(0,0,Cadena);
//	sprintf(Cadena, "    %02x:%02x:%02x    ", hora,minuto,segundo);
//	PrintfLcdXY(0,1,Cadena);
	goto Main1;
}


#pragma code HiVector = 0x08	
void atHiVector(void)
{
	_asm goto MiVector _endasm
}

#pragma code

#pragma interrupt MiVector

void MiVector(void)
{
	_asm
	btfsc	PIR1,1,0	//Chequeo si la int vino del Timer2
	goto	Timer2
	btfsc	PIR1,6,0	//Chequeo si la int vino del conv
	goto	Rconvert
	btfsc	PIR1,5,0	//Chequeo RCIF para ver si la int vino de la USART
	goto	RecRxPc
	goto	FinInt


//++++++++++++++++++++++++++++
//    Rutina Rx232
//++++++++++++++++++++++++++++
RecRxPc:
	bcf		PIR1,5,0
	movlb	0x01
	movff	FSR0H,SaveFSR0H   	//Salvo el puntero del FSR apra el direccionamiento indirecto
	movff	FSR0L,SaveFSR0L
	btfsc	RCSTA,2,0   	  	//FERR
	goto	WasErr2
	btfsc	RCSTA,1,0		  	//0ERR
	goto	WasErr2
	movlw	MxBufferSize
	movlb	0x02
	subwf	(Buffer232+0),0,1   //NDatos
	bc		WasErr2
	clrf	FSR0H,0
	movf	(Buffer232+1),0,1   //Leo la direccion de PunteroIn
	addlw	(Buffer232+3)		//Le sumo la direccion de donde comienza el buffer
	movwf	FSR0L,0				//Guardo el valor del buffer en el fsr0l
	movlw	0x02
	addwf	FSR0H,1,0      		//Le sumo 2 a la parte alta porq estoy en el banco 2
	movff	RCREG,INDF0			//Paso RCREG a la direccion del buffer
	incf	(Buffer232+1),1,1	//Incremento PunteroIn
	movlw	MxBufferSize		
	subwf	(Buffer232+1),0,1   //Chequeo que PunteroIn no sea mayor que MxBufferSize
	bnc		NoRst2				//Si no es mayor salto
	clrf	(Buffer232+1),1		//Sino Limpio PunteroIn	
NoRst2:
	incf	(Buffer232+0),1,1   //Incremento NDatos
	goto 	SalRx2
WasErr2:	
	movff	RCREG,WREG			//Para limpiar el error
SalRx2:
	movlb	0x01
	movff	SaveFSR0H,FSR0H
	movff	SaveFSR0L,FSR0L
	goto	FinInt

//++++++++++++++++++++++++++++
// 		Rutina Timer 2
//++++++++++++++++++++++++++++
Timer2:
	bcf		PIR1,1,0
	bsf		ADCON0,1,0	//GO
	movlb	0x01			//_endasm
	movf	TSend,1,1		//if (TSend != 0)
	bz		NoDec			//Salta a NoDec;
	decf	TSend,1,1		


//++++++++++++++++++++++++++++
//			Rutina Teclado
//++++++++++++++++++++++++++++

NoDec:
	movf	Temp_No_Tec,1,1  //Chequear si es 0
	bz		NoDcNt
	decf	Temp_No_Tec,1,1

NoDcNt:
	movf	Temp_No_Tec,1,1 //Hago el barrido del display por columna y reviso cual es el valor que devuelve
	bnz		FinInt
	movlw	0x0
	btfsc	PORTA,2,0
	movlw	0x04
	btfsc	PORTA,3,0
	movlw	0x08
	btfsc	PORTA,4,0
	movlw	0x0C
	btfsc	PORTA,5,0
	movlw	0x10
	movf	WREG,0,0
	bz		NoTec
	addwf	Columna,0,1     // Sumo el valor de W + Columna.
	movwf	Temp_Tec,1      // Lo guardo en Temp_Tec

NoTec:
	incf	Columna,1,1	    //Incremento columna
	movlw	0x03
	cpfsgt	Columna,1		//Testeo si es mayor que tres
	goto	NoPCe			
	clrf	Columna,1		//Pongo columna en 0
	tstfsz	Temp_Tec,1	    //Testeo si es cero
	goto	SiTec			//Si no es cero, es porq hubo una tecla
	clrf	Last_Tec,1		//Si es cero.
	goto	NoPCe

SiTec:
	movlw   0x03			//Es para barrer la tecla, se hace dos veces, se comparan y si son iguales se guarda
	subwf	Temp_Tec,1,1
	movf	Temp_Tec,0,1
	cpfseq	Last_Tec,1
	goto	No_LEqu			//Si las dos son iguales, la doy como válida.
	movwf	New_Tec,1		//Lo guarda en New_Tec
	movlw	0xFA //250			//Asigna nuevamente 250 a Temp_No_Tec
	movwf	Temp_No_Tec,1
	clrf	WREG,0
//	goto 	NoPCe

No_LEqu:
	movwf	Last_Tec,1      //Si no fue igual, guarda en Last_Tec, para que en la prox vez lo compare bien.
	clrf	Temp_Tec,1
	
NoPCe:
	bcf		PORTB,0,0       //Para sacar los 1 en la columna que corresponda
	bcf		PORTB,1,0
	bcf		PORTB,2,0
	bcf		PORTB,3,0
	incf	Columna,0,1  	//Incrementar en 1 a columna y lo coloco en W
	dcfsnz	WREG,1,0		//Decremento, y si es cero, seteo ese port
	bsf		PORTB,0,0
	dcfsnz	WREG,1,0		//Si no es cero, salto al proximo.
	bsf		PORTB,1,0
	dcfsnz	WREG,1,0
	bsf		PORTB,2,0
	dcfsnz	WREG,1,0
	bsf		PORTB,3,0
	goto 	FinInt
	
//++++++++++++++++++++++++++++
//    Rutina Conversor
//++++++++++++++++++++++++++++
Rconvert:
	bcf		PIR1,6,0
	movlb	0x01
	movf	ADRESL,0,0
	addwf	Conversor+0,1,1
	movf	ADRESH,0,0
	addwfc	Conversor+1,1,1
	decfsz	AcumAD,1,1
	goto	FinInt
	movlw	64
	movwf	AcumAD,1
	movf	Conversor+0,0,1
	movwf	Canal0+0,1
	movf	Conversor+1,0,1
	movwf	Canal0+1,1
	clrf	Conversor+0,1
	clrf	Conversor+1,1
	goto	FinInt


FinInt:
	_endasm
}
#pragma code


unsigned char ASCII_HEX(char Letra)
{
	LocalData=Letra; //Como no se en q banco está letra, lo muevo a LocalData que si se que esta en el banco 1
	_asm
		movlb	0x01
		movf	LocalData,0,1
		iorlw	0x20
		addlw	(.256 - 0x61)		
		btfss	STATUS,0,0
		addlw	0x27
		addlw	0x0A
		andlw	0x0F
		movwf	LocalData,1
	_endasm
	return(LocalData);
}

unsigned char DecoTecla(unsigned char NT){
	switch(NT){
		case 0: return 0;
				break;
		case 1:	return 13;
				break;
		case 2:	return 14;
				break;
		case 3:	return 15;
				break;
		case 4:	return 6;
				break;
		case 5:	return 3;
				break;
		case 6:	return 6;
				break;
		case 7:	return 9;
				break;
		case 8:	return 12;
				break;
		case 9:	return 2;
				break;
		case 10: return 5;
				 break;
		case 11: return 8;
				 break;
		case 12: return 10;
				 break;
		case 13: return 1;
				 break;
		case 14: return 4;
				 break;
		case 15: return 7;
				 break;
		case 16: return 11;
				 break;
	}
}